{"version":3,"file":"static/js/841.0f2f2c2e.chunk.js","mappings":"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","sources":["components/HeroBanner.jsx","components/Rating.jsx","api/productApis.js","services/productService.js","api/bannerApis.js","services/bannerServices.js","hooks/useInView.js","components/RatingBadge.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { useBanners } from \"../services/bannerServices\";\nimport Carousel from \"./Carousel\";\nimport Skeleton from \"./Skeleton\";\nimport useInView from \"../hooks/useInView\";\nimport useMediaQuery from \"../hooks/useMediaQuery\";\n\nconst HeroBanner = ({\n  preload = false,\n  position,\n  resourceType,\n  valueId,\n  title,\n  subtitle,\n  className,\n  containerClassName = \"container max-w-full\",\n}) => {\n  const containerRef = useRef(null);\n  const hasFetchedOnce = useRef(false);\n  const [shouldFetch, setShouldFetch] = useState(preload);\n  const maxMd = useMediaQuery(\"(max-width: 768px)\");\n\n  const isInView = useInView(containerRef, {\n    threshold: 0.1,\n    rootMargin: \"100px\",\n  });\n\n  const { data: banners = [], isLoading } = useBanners(\n    {\n      bannerType: \"Hero\",\n      position,\n      resourceType,\n      valueId,\n    },\n    { enabled: shouldFetch }\n  );\n\n  useEffect(() => {\n    if (!hasFetchedOnce.current && isInView && position && resourceType) {\n      setShouldFetch(true);\n      hasFetchedOnce.current = true;\n    }\n  }, [isInView, position, resourceType]);\n\n  return (\n    <div ref={containerRef}>\n      {isLoading ? (\n        <ul className={`flex gap-4 overflow-x-hidden ${containerClassName}`}>\n          {Array.from({ length: 1 }).map((_, index) => (\n            <li\n              key={index}\n              className={`block relative w-full h-80 max-lg:h-48 max-md:h-24 overflow-hidden flex-shrink-0 ${className}`}\n            >\n              <Skeleton overall=\"light\" />\n            </li>\n          ))}\n        </ul>\n      ) : (\n        banners?.length > 0 && (\n          <div className={`space-y-4 max-lg::space-y-2 ${containerClassName}`}>\n            {title || subtitle ? (\n              <div>\n                <h1 className=\"text-2xl max-lg:text-xl font-bold\">{title}</h1>\n                <p className=\"text-sm\">{subtitle}</p>\n              </div>\n            ) : null}\n            <Carousel navigation={!maxMd} autoplay delay={5000} allowTouchMove>\n              {banners.map((banner, index) => (\n                <a\n                  key={banner.bannerTitle || index}\n                  href={banner.linkUrl}\n                  className=\"block relative w-full h-max rounded-lg\"\n                >\n                  <img\n                    src={banner.bannerImg}\n                    alt={banner.bannerTitle || index}\n                    loading=\"lazy\"\n                    className={`w-full object-cover object-center ${className}`}\n                  />\n                </a>\n              ))}\n            </Carousel>\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default HeroBanner;\n","import { IoMdStar, IoMdStarHalf, IoMdStarOutline } from \"react-icons/io\";\n\nconst Rating = ({ rating, maxRating = 5, size = 16 }) => {\n  const renderStars = () => {\n    const stars = [];\n    const ceilRating = Math.ceil(rating);\n    const hasHalfStar = Math.floor(rating) !== Math.ceil(rating);\n\n    for (let i = 1; i <= maxRating; i++) {\n      if (i <= rating)\n        stars.push(\n          <span key={i} className=\"text-yellow-500 text-lg\">\n            <IoMdStar size={size} />\n          </span>\n        );\n      else if (i === ceilRating && hasHalfStar)\n        stars.push(\n          <span key={i} className=\"text-yellow-500 text-lg\">\n            <IoMdStarHalf size={size} />\n          </span>\n        );\n      else\n        stars.push(\n          <span key={i} className=\"text-gray-300 text-lg\">\n            <IoMdStarOutline size={size} />\n          </span>\n        );\n    }\n\n    return stars;\n  };\n\n  return <div className=\"flex\">{renderStars()}</div>;\n};\n\nexport default Rating;\n","import axiosInstance from \"./axiosInstance\";\n\nconst getProductById = async (productId) => {\n  const response = await axiosInstance.get(`/getProductById/${productId}`);\n  return response.data;\n};\n\nconst getAllVariants = async (params) => {\n  const response = await axiosInstance.get(\"/getAllVariantsOnUser\", { params });\n  return response.data;\n};\n\nconst getAllUtsavVariants = async () => {\n  const response = await axiosInstance.get(\"/getAllUtsavProduct\");\n  return response.data?.productDetails;\n};\n\nconst getAllFeaturedVariants = async () => {\n  const response = await axiosInstance.get(\"/getAllFeaturedProduct\");\n  return response.data?.variantDetails;\n};\n\nconst getFeaturedVariantsBasedOnCategory = async (categoryId) => {\n  const response = await axiosInstance.get(\n    `/getFeaturedProductBasedOnCategory/${categoryId}`\n  );\n  return response.data?.productList;\n};\n\nconst getAllNewArrivals = async () => {\n  const response = await axiosInstance.get(\"/getAllNewArrivals\");\n  return response.data?.productDetails;\n};\n\nconst getAllTopSellingProducts = async () => {\n  const response = await axiosInstance.get(\"/getAllTopSellingProduct\");\n  return response.data;\n};\n\nconst getVariant = async (variantId) => {\n  const response = await axiosInstance.get(`/getVariantById/${variantId}`);\n  return response.data?.variantDetails;\n};\n\nconst getRecommendation = async (variantId) => {\n  const response = await axiosInstance.get(\n    `/suggestionProductList/${variantId}`\n  );\n  return response.data?.suggestionProductList;\n};\n\nconst getAllReviews = async (productId) => {\n  const response = await axiosInstance.get(`/GetAllReviews/${productId}`);\n  return response.data;\n};\n\nconst getReviewById = async (productId, reviewId) => {\n  const response = await axiosInstance.get(\n    `/reviewByID/${productId}/${reviewId}`\n  );\n  return response.data;\n};\n\nconst getRatingDetails = async (productId) => {\n  const response = await axiosInstance.get(`/getAvgRating/${productId}`);\n  return response.data;\n};\n\nconst createReview = async (reviewData, productId) => {\n  const response = await axiosInstance.post(\n    `/createReview/${productId}`,\n    reviewData,\n    { headers: { \"Content-Type\": \"multipart/form-data\" } }\n  );\n  return response.data;\n};\n\nconst updateReview = async (reviewData, productId, reviewId) => {\n  const response = await axiosInstance.post(\n    `/updateReview/${productId}/${reviewId}`,\n    reviewData\n  );\n  return response.data;\n};\n\nconst deleteReview = async (reviewId) => {\n  const response = await axiosInstance.get(`/deleteReview/${reviewId}`);\n  return response.data;\n};\n\nexport {\n  getProductById,\n  getAllVariants,\n  getAllUtsavVariants,\n  getAllFeaturedVariants,\n  getFeaturedVariantsBasedOnCategory,\n  getAllNewArrivals,\n  getAllTopSellingProducts,\n  getVariant,\n  getRecommendation,\n  createReview,\n  getAllReviews,\n  getReviewById,\n  getRatingDetails,\n  updateReview,\n  deleteReview,\n};\n","import {\n  keepPreviousData,\n  useMutation,\n  useQuery,\n  useQueryClient,\n} from \"@tanstack/react-query\";\nimport {\n  createReview,\n  deleteReview,\n  getAllFeaturedVariants,\n  getAllNewArrivals,\n  getAllReviews,\n  getAllTopSellingProducts,\n  getAllUtsavVariants,\n  getAllVariants,\n  getFeaturedVariantsBasedOnCategory,\n  getProductById,\n  getRatingDetails,\n  getRecommendation,\n  getReviewById,\n  getVariant,\n  updateReview,\n} from \"../api/productApis\";\n\nconst useProductById = (productId) => {\n  return useQuery({\n    queryKey: [\"productGroup\", productId],\n    queryFn: () => getProductById(productId),\n    staleTime: 1000 * 60 * 5,\n    enabled: !!productId,\n  });\n};\n\nconst useVariants = (params) => {\n  return useQuery({\n    queryKey: [\"variants\", params],\n    queryFn: () => getAllVariants(params),\n    staleTime: 1000 * 60 * 5,\n    placeholderData: keepPreviousData,\n  });\n};\n\nconst useAllUtsavVariants = () => {\n  return useQuery({\n    queryKey: [\"variants\", \"utsav\"],\n    queryFn: getAllUtsavVariants,\n    staleTime: 1000 * 60 * 5,\n  });\n};\n\nconst useAllFeaturedVariants = () => {\n  return useQuery({\n    queryKey: [\"variants\", \"featured\"],\n    queryFn: getAllFeaturedVariants,\n    staleTime: 1000 * 60 * 5,\n  });\n};\n\nconst useFeaturedVariantsBasedOnCategory = (categoryId) => {\n  return useQuery({\n    queryKey: [\"variants\", \"featured\", categoryId],\n    queryFn: () => getFeaturedVariantsBasedOnCategory(categoryId),\n    staleTime: 1000 * 60 * 5,\n    enabled: !!categoryId,\n  });\n};\n\nconst useTopSellingProducts = () => {\n  return useQuery({\n    queryKey: [\"products\", \"top selling\"],\n    queryFn: getAllTopSellingProducts,\n    staleTime: 1000 * 60 * 5,\n  });\n};\n\nconst useNewArrivals = () => {\n  return useQuery({\n    queryKey: [\"variants\", \"new arrivals\"],\n    queryFn: getAllNewArrivals,\n    staleTime: 1000 * 60 * 5,\n  });\n};\n\nconst useRecommendation = (variantId) => {\n  return useQuery({\n    queryKey: [\"recommendations\", variantId],\n    queryFn: () => getRecommendation(variantId),\n    staleTime: 1000 * 60 * 5,\n    enabled: !!variantId,\n  });\n};\n\nconst useVariantById = (variantId) => {\n  return useQuery({\n    queryKey: [\"variant\", variantId],\n    queryFn: () => getVariant(variantId),\n    staleTime: 1000 * 60 * 5,\n    enabled: !!variantId,\n  });\n};\n\nconst useReviews = (productId) => {\n  return useQuery({\n    queryKey: [\"reviews\", productId],\n    queryFn: () => getAllReviews(productId),\n    staleTime: 1000 * 60 * 5,\n    enabled: !!productId,\n  });\n};\n\nconst useReviewById = (productId, reviewId) => {\n  return useQuery({\n    queryKey: [\"review\", productId, reviewId],\n    queryFn: () => getReviewById(productId, reviewId),\n    staleTime: 1000 * 60 * 5,\n    enabled: !!productId && !!reviewId,\n  });\n};\n\nconst useRatingDetails = (productId) => {\n  return useQuery({\n    queryKey: [\"rating\", productId],\n    queryFn: () => getRatingDetails(productId),\n    staleTime: 1000 * 60 * 5,\n    enabled: !!productId,\n  });\n};\n\nconst useAddReview = (productId) => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ reviewData, productId }) =>\n      createReview(reviewData, productId),\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"reviews\", productId]);\n    },\n  });\n};\n\nconst useUpdateReview = (productId, reviewId) => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ reviewData, productId, reviewId }) =>\n      updateReview(reviewData, productId, reviewId),\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"review\", productId, reviewId]);\n    },\n  });\n};\n\nconst useDeleteReview = (productId, reviewId) => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: deleteReview,\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"review\", productId, reviewId]);\n    },\n  });\n};\n\nexport {\n  useProductById,\n  useVariants,\n  useAllUtsavVariants,\n  useAllFeaturedVariants,\n  useFeaturedVariantsBasedOnCategory,\n  useTopSellingProducts,\n  useNewArrivals,\n  useRecommendation,\n  useVariantById,\n  useReviews,\n  useReviewById,\n  useRatingDetails,\n  useAddReview,\n  useUpdateReview,\n  useDeleteReview,\n};\n","import axiosInstance from \"./axiosInstance\";\n\nconst getBanners = async (params) => {\n  const response = await axiosInstance.get(\"/getAllBannersByBannerType\", {\n    params,\n  });\n  return response.data?.data;\n};\n\nconst getAllGalleryBanners = async () => {\n  const response = await axiosInstance.get(\"/getAllPublishedGallery\");\n  return response.data?.galleryDetails;\n};\n\nexport { getBanners, getAllGalleryBanners };\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getAllGalleryBanners, getBanners } from \"../api/bannerApis\";\n\nconst useBanners = (params, options) => {\n  return useQuery({\n    queryKey: [\"banners\", params],\n    queryFn: () => getBanners(params),\n    staleTime: 1000 * 60 * 5,\n    retry: false,\n    ...options,\n  });\n};\n\nconst useGalleryBanners = () => {\n  return useQuery({\n    queryKey: [\"galleryBanners\"],\n    queryFn: () => getAllGalleryBanners(),\n    staleTime: 1000 * 60 * 5,\n    retry: false,\n  });\n};\n\nexport { useBanners, useGalleryBanners };\n","import { useEffect, useState } from \"react\";\n\nconst useInView = (ref, options = { threshold: 0.1, rootMargin: \"0px\" }) => {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  useEffect(() => {\n    if (!ref.current) return;\n\n    const observer = new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n    }, options);\n\n    const element = ref.current;\n    observer.observe(element);\n\n    return () => {\n      observer.unobserve(element);\n    };\n  }, [ref, options]);\n\n  return isIntersecting;\n};\n\nexport default useInView;\n","import { useState } from \"react\";\nimport { IoMdStar } from \"react-icons/io\";\nimport Rating from \"./Rating\";\n\nconst getColorForRating = (rating) => {\n  switch (true) {\n    case rating >= 4:\n      return \"bg-green-500\";\n    case rating >= 3:\n      return \"bg-green-400\";\n    case rating >= 2:\n      return \"bg-yellow-400\";\n    case rating >= 1:\n      return \"bg-orange-400\";\n    default:\n      return \"bg-gray-200\";\n  }\n};\n\nconst getColorForRatingDetails = (rating) => {\n  switch (rating) {\n    case 5:\n      return \"bg-green-500\";\n    case 4:\n      return \"bg-green-400\";\n    case 3:\n      return \"bg-yellow-400\";\n    case 2:\n      return \"bg-orange-400\";\n    case 1:\n      return \"bg-red-500\";\n    default:\n      return \"bg-gray-200\";\n  }\n};\n\nconst RatingDetailsDropdown = ({ rating, totalRatings, ratingsBreakdown }) => {\n  return (\n    <div className=\"w-64 p-4 bg-white border rounded shadow-lg\">\n      <div className=\"text-center\">\n        <div className=\"text-4xl font-bold\">{rating.toFixed(1)}</div>\n        <div className=\"text-secondary\">{totalRatings} Ratings</div>\n        <div className=\"mt-2 flex justify-center\">\n          <Rating rating={rating} size={24} />\n        </div>\n      </div>\n      {ratingsBreakdown && (\n        <div className=\"mt-4 space-y-1\">\n          {Object.entries(ratingsBreakdown)\n            .sort(([a], [b]) => b - a)\n            .map(([key, count]) => (\n              <div key={key} className=\"flex items-center gap-1\">\n                <span className=\"text-secondary\">{key}</span>\n                <IoMdStar size={18} className=\"text-secondary mr-2\" />\n                <div className=\"flex-1 h-2 bg-lightGray rounded-full overflow-hidden\">\n                  <div\n                    className={`h-full ${getColorForRatingDetails(\n                      Number(key)\n                    )}`}\n                    style={{ width: `${(count / totalRatings) * 100}%` }}\n                  />\n                </div>\n                <span className=\"ml-2 text-secondary\">({count})</span>\n              </div>\n            ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst RatingBadge = ({\n  rating,\n  totalRatings,\n  ratingsBreakdown,\n  dropdown = false,\n}) => {\n  const [showDropdown, setShowDropdown] = useState(false);\n\n  return (\n    <div\n      className=\"relative inline-block\"\n      onMouseEnter={() => setShowDropdown(true)}\n      onMouseLeave={() => setShowDropdown(false)}\n    >\n      <div\n        className={`flex items-center justify-center gap-[2px] px-[5px] py-[2px] rounded text-white ${getColorForRating(\n          rating\n        )}`}\n      >\n        <span className=\"text-xs font-medium pt-[2px] leading-none\">\n          {rating.toFixed(1)}\n        </span>\n        <IoMdStar size={12} />\n      </div>\n      {dropdown && showDropdown && (\n        <div className=\"absolute z-10 mt-2\">\n          <RatingDetailsDropdown\n            rating={rating}\n            totalRatings={totalRatings}\n            ratingsBreakdown={ratingsBreakdown}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RatingBadge;\n"],"names":["_ref","preload","position","resourceType","valueId","title","subtitle","className","containerClassName","containerRef","useRef","hasFetchedOnce","shouldFetch","setShouldFetch","useState","maxMd","useMediaQuery","isInView","useInView","threshold","rootMargin","data","banners","isLoading","useBanners","bannerType","enabled","useEffect","current","_jsx","ref","children","concat","Array","from","length","map","_","index","Skeleton","overall","_jsxs","Carousel","navigation","autoplay","delay","allowTouchMove","banner","href","linkUrl","src","bannerImg","alt","bannerTitle","loading","rating","maxRating","size","renderStars","stars","ceilRating","Math","ceil","hasHalfStar","floor","i","push","IoMdStar","IoMdStarHalf","IoMdStarOutline","getAllUtsavVariants","async","_response$data","axiosInstance","get","productDetails","getAllNewArrivals","_response$data4","getAllTopSellingProducts","useProductById","productId","useQuery","queryKey","queryFn","getProductById","staleTime","useVariants","params","getAllVariants","placeholderData","keepPreviousData","useAllUtsavVariants","useFeaturedVariantsBasedOnCategory","categoryId","_response$data3","productList","getFeaturedVariantsBasedOnCategory","useTopSellingProducts","useNewArrivals","useRecommendation","variantId","_response$data6","suggestionProductList","getRecommendation","useVariantById","_response$data5","variantDetails","getVariant","useReviews","getAllReviews","useRatingDetails","getRatingDetails","useAddReview","queryClient","useQueryClient","useMutation","mutationFn","reviewData","post","headers","createReview","onSuccess","invalidateQueries","options","_objectSpread","getBanners","retry","useGalleryBanners","_response$data2","galleryDetails","getAllGalleryBanners","arguments","undefined","isIntersecting","setIsIntersecting","observer","IntersectionObserver","entry","element","observe","unobserve","getColorForRating","getColorForRatingDetails","RatingDetailsDropdown","totalRatings","ratingsBreakdown","toFixed","Rating","Object","entries","sort","_ref2","_ref3","a","b","_ref4","key","count","Number","style","width","_ref5","dropdown","showDropdown","setShowDropdown","onMouseEnter","onMouseLeave"],"sourceRoot":""}